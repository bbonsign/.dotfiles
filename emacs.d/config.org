#+TITLE:  Brian Bonsignore's Emacs Configuration
#+AUTHOR: Brian Bonsignore
#+EMAIL:  bonsignore.brian@gmail.com
#+DATE:   2019 Dec 13
#+TAGS:   technical emacs config
#+PROPERTY: header-args    :results silent
#+STARTUP: indent overview

* About
** Sources and examples
 Based on examples from the following sources, roughly in order of influence on this document:
   - [[https://gitlab.com/buildfunthings/emacs-config]]
   - [[https://jamiecollinson.com/blog/my-emacs-config/]]
   - [[https://github.com/rememberYou/.emacs.d/blob/master/config.org]]
   - [[https://github.com/munen/emacs.d/]]
   - [[https://github.com/howardabrams/dot-files/blob/master/emacs.org][Howard Abraham]]
   - [[https://github.com/mm--/dot-emacs/blob/master/jmm-emacs.org]]
   - [[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org]]
   - [[https://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]]
   - [[https://github.com/justinabrahms/.emacs.d/blob/master/init.org][Justin Abrahams]]
   - [[https://github.com/Alexander-Miller/dotfiles/blob/master/.config/spacemacs/user-config.org][This one]] is from the creator of treemacs, though it might be for spacemacs.  Check it out later
Other sources of examples [[https://www.emacswiki.org/emacs/ExampleConfigurations]]

** How this is used
This document is loaded with org-babel in the init file:
[[~/.dotfiles/emacs/init.el]], which is then symlinked to
~/.emacs.d/init.el with the command ==ln -s ~/.dotfiles/emacs/init.el /home/bbonsign/.emacs.d/init.el==


* Todo Security
Look into here:
 - [[https://glyph.twistedmatrix.com/2015/11/editor-malware.html#fnref:3]]
 - [[https://github.com/credmp/emacs-config/blob/master/loader.org#a-secure-emacs-environment]]
I updated the tls-checktrust variable to t with M-x
customize-variable, and that seems to give warnings to stop bad
connections when applying the sample elisp snippets in the above
links, though it didn't exactly match the behavior hinted at.
#+BEGIN_SRC emacs-lisp
  ;; (setq gnutls-min-prime-bits 4096)

  ;; (require 'cl)
  ;; (setq tls-checktrust t)

  ;; (setq python (or (executable-find "py.exe")
  ;;                  (executable-find "python")
  ;;                  ))

  ;; (let ((trustfile
  ;;        (replace-regexp-in-string
  ;;         "\\\\" "/"
  ;;         (replace-regexp-in-string
  ;;          "\n" ""
  ;;          (shell-command-to-string (concat python " -m certifi"))))))
  ;;   (setq tls-program
  ;;         (list
  ;;          (format "gnutls-cli%s --x509cafile %s -p %%p %%h"
  ;;                  (if (eq window-system 'w32) ".exe" "") trustfile)))
  ;;   (setq gnutls-verify-error t)
  ;;   (setq gnutls-trustfiles (list trustfile)))
#+END_SRC


* Start up settings
** Always rebuild init
When Emacs expands this org-mode file into the actual elisp code, it creates a new document: [[./config.org][this file]] derives [[file:.emacs.d/config.el][config.el]].
The latter holds my customisations in the state they were in at the time the document was created.
Any updates require a rewrite.

To make sure that I do not load older settings after having made some tweaks to my dotemacs, I want to delete that derived file when I instruct Emacs to terminate its process.
This ensures that edits I made to emacs-init.org are parsed into a new emacs-init.el at the next startup.

#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :config
    (defun prot/delete-emacs-init ()
      (interactive)
      (let ((configs "~/.emacs.d/config.el"))
        (when configs
          (delete-file configs))))
    :hook (kill-emacs . prot/delete-emacs-init)
    )
#+END_SRC

** Separate Customizations File
If I make any changes using Custom, I want them to be in a separate file.
Customize writes customizations to that file and not to your init file (~/.emacs).
Keeps hand-written initialization code separate from the automatic code written
by Customize. Add code to define 'custom-file' variable
#+BEGIN_SRC emacs-lisp
  (use-package cus-edit
    :config
    (setq custom-file "~/.emacs.d/custom.el")
    (if (file-exists-p custom-file)
      (load custom-file))
    )
#+END_SRC

** Personal Information
 #+BEGIN_SRC emacs-lisp
 (setq user-full-name "Brian Bonsignore")
 (setq user-mail-address "bonsignore.brian@gmail.com")
 #+END_SRC

** Operating System Specific stuff
See [[https://stackoverflow.com/questions/4076360/error-in-dired-sorting-on-os-x][SO post on using GNU Cls on a Mac]]
 #+BEGIN_SRC emacs-lisp
   (when (eq system-type 'darwin)
     (require 'ls-lisp)
     (setq ls-lisp-use-insert-directory-program nil))
#+END_SRC


* General Customizations
** Hide menu bar and tool bars. Inhibit the splash screen. Frame Title. Scroll Bars
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :init
    (unless (eq system-type 'darwin)
      (menu-bar-mode -1)) ;; menu-bar is in the sytem top bar on mac anyway, so might as well keep it
    (tool-bar-mode -1) ;; no toolbar
    (scroll-bar-mode -1) ;; No Scroll bars
    :config
    (setq inhibit-splash-screen t) ;; no splash screen
    (setq frame-title-format "Emacs - %b") ;; Show buffer name in frame title
    (global-unset-key (kbd "C-x C-z")) ;; No need to suspend frame
    (setq-default cursor-type '(bar . 1))
    (setq-default cursor-in-non-selected-windows 'hollow)
    ;; (setq-default cursor-type 'box)
    (blink-cursor-mode -1) ;; No Blinking!!
    )
#+END_SRC

** TODO Move lines
Currently from https://www.emacswiki.org/emacs/MoveLine, but look into [[https://github.com/targzeta/move-lines]].
#+BEGIN_SRC emacs-lisp
  (defmacro save-column (&rest body)
    `(let ((column (current-column)))
       (unwind-protect
           (progn ,@body)
         (move-to-column column))))
  (put 'save-column 'lisp-indent-function 0)

  (defun move-line-up ()
    (interactive)
    (save-column
      (transpose-lines 1)
      (forward-line -2)))

  (defun move-line-down ()
    (interactive)
    (save-column
      (forward-line 1)
      (transpose-lines 1)
      (forward-line -1)))

  (global-set-key (kbd "M-s-<up>") 'move-line-up)
  (global-set-key (kbd "M-s-<down>") 'move-line-down)
#+END_SRC

** Increase Garbage Collection Threshold
Allow 20MB of memory (instead of 0.76MB) before calling garbage collection.
 This means GC runs less often, which speeds up some operations.
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 20000000);
#+END_SRC

** UTF-8
Default to utf-8 encoding
#+BEGIN_SRC emacs-lisp
  (set-default-coding-systems 'utf-8)
  (setq coding-system-for-read 'utf-8)
  (setq coding-system-for-write 'utf-8)
#+END_SRC

** Backups and Autosaves
This is one of the things people usually want to change right away. By
default, Emacs saves backup files in the current directory. These are
the files ending in ~ that are cluttering up your directory lists. The
following code stashes them all in ~/.emacs.d/backups, where I can
find them with C-x C-f (find-file) if I really need to.

Delete by moving to trash
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :config
    (setq backup-directory-alist
          '(("." . "~/.emacs.d/backups/")))
    (setq backup-by-copying t)  ;; Don't delink hardlinks
    (setq version-control t)    ;; Use version numbers on backups
    (setq elete-old-versions t) ;; Automatically delete excess backups
    (setq kept-new-versions 6)  ;; how many of the newest versions to keep (default: 2)
    (setq kept-old-versions 2)  ;; and how many of the old (default: 2)
    (setq create-lockfiles nil)

    (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
    (setq auto-save-timeout 20)  ;; number of seconds idle time before auto-save (default: 30)
    (setq auto-save-interval 200) ;; number of keystrokes between auto-saves (default: 300)

    (setq delete-by-moving-to-trash t
          trash-directory "~/.local/share/Trash/files")
    )
#+END_SRC

** Switch to home ~ and make default for find-file
#+BEGIN_SRC emacs-lisp
(cd "~/") ;;  Move to the user directory
(setq default-directory "~/")
#+END_SRC

** Smart 'C-a'
#+BEGIN_SRC emacs-lisp
  (defun my/beginning-of-line ()
    "Make C-a toggle between the beginning of line and first non-whitespace character"
    (interactive)
    (if (= 0 (current-column))
        (back-to-indentation)
      (beginning-of-line)))

  (with-eval-after-load 'org (global-set-key (kbd "C-a") 'my/beginning-of-line))
#+END_SRC

** Smoother Scrolling
#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
#+END_SRC

** Delete trailing whitespace
Whitespace at the end of lines: remove it on save.
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Parentheses and Highlight Current line
#+BEGIN_SRC emacs-lisp
(setq show-paren-delay 0) ;; no delay when highlightng matching parens
(show-paren-mode 1) ;; show matching parens
;(global-hl-line-mode 1) ; highlight current line
#+END_SRC

** Tabs, fill column, and spaces after sentence
#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
  (setq standard-indent 4)
  (setq tab-width 4)
  (setq tab-stop-list '(4 8 12))
  (setq-default indent-tabs-mode nil) ;; prefer spaces over tabs
  (setq fill-column 80) ;; M-q should fill at 80 chars, not 75
#+END_SRC

** Save Desktop
Auto-save buffer state on close for a later time.
#+BEGIN_SRC emacs-lisp
  (desktop-save-mode 1)
#+END_SRC

** Remember the cursor position of files when reopening them
#+BEGIN_SRC emacs-lisp
(setq save-place-file "~/.emacs.d/saveplace")
(setq-default save-place t)
(require 'saveplace)
#+END_SRC

** Help Window Behavior
The *help* window default behavior is kinda annoying. Always select
it so I can quickly close it by pressing "q"
#+BEGIN_SRC emacs-lisp
(setq help-window-select t)
#+END_SRC
** Prompt before exiting Emacs
#+BEGIN_SRC emacs-lisp
  (setq kill-emacs-query-functions
        (cons (lambda () (yes-or-no-p "Really kill Emacs?"))
       kill-emacs-query-functions))
#+END_SRC
** Always kill current buffer
Assume that I always want to kill the current buffer when hitting C-x k.
#+BEGIN_SRC emacs-lisp
  (defun my/kill-current-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))

  (global-set-key (kbd "C-x k") 'my/kill-current-buffer)
#+END_SRC
** Enable Narrow To Region
Enable narrow-to-region (C-x n n / C-x n w). This is disabled by
default to not confuse beginners.
#+BEGIN_SRC emacs-lisp
  (put 'narrow-to-region 'disabled nil)
#+END_SRC

** Save on defocus
And let’s make sure our files are saved if we wander off and defocus
the Emacs application:
#+BEGIN_SRC emacs-lisp
  (defun save-all ()
    "Save all dirty buffers without asking for confirmation."
    (interactive)
    (save-some-buffers t))

  (add-hook 'focus-out-hook 'save-all)
#+END_SRC

** TODO Theme, Appearance, Modeline
Theme from [[https://github.com/arcticicestudio/nord-emacs]] Also wombat
and deeper blue are pretty good built-in themes. Arjen-grey could be
good too
*** Font
#+BEGIN_SRC emacs-lisp
  (set-frame-font "Fira Code-13:medium" nil t)
#+END_SRC

*** Fancy Symbols
First part turns lambdas into actual lambdas in code, for example.
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode 1)
  (setq prettify-symbols-unprettify-at-point 'right-edge)
#+END_SRC

*** Load Theme
Any tweaks?
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :defer 0.5)

(use-package doom-themes
  :config (load-theme 'doom-nord t))
#+END_SRC

*** TODO Modeline
Some options:
- [[https://github.com/TheBB/spaceline]]
  - [[https://github.com/daedreth/UncleDavesEmacs#spaceline][Spaceline Example Congig]]
- [[https://github.com/Malabarba/smart-mode-line]]
- [[https://github.com/rememberYou/.emacs.d/blob/master/config.org#theme]]

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :defer 0.1
  :config (doom-modeline-mode))
#+END_SRC

**** Modeline: display time, battery, cursor position
Since I use emacs in fullscreen, it's good to have the time and
battery level visible in the modeline. Might look into whether these
can automatically appear when I enter full screen and stay hidden
otherwise.
#+BEGIN_SRC emacs-lisp
  (setq line-number-mode t)
  (setq column-number-mode t)
  ;; If you prefer the 12hr-format, change the variable to nil instead of t.
  (setq display-time-24hr-format nil)
  (setq display-time-format "%H:%M ")
  (setq display-time-default-load-average nil)
  (display-time-mode 1)
#+END_SRC

A package called fancy-battery will be used if we are in GUI emacs,
otherwise the built in battery-mode will be used. Fancy battery has
very odd colors if used in the tty, hence us disabling it.
#+BEGIN_SRC emacs-lisp
  (use-package fancy-battery
    :ensure t
    :after doom-modeline
    ;:hook (after-init . fancy-battery-mode)
    :config
    (setq fancy-battery-show-percentage t)
    (setq battery-update-interval 15)
    (if window-system
        (fancy-battery-mode)
      (display-battery-mode)))
#+END_SRC

** Visual line mode and fringe indicator
visual-line-mode soft wraps lines at fill-column (set to 80 above).
'C-k' will not cut the whole logical line when the cursor is at the beginning of the line.
However, this is alleviated below by advice to the C-w and M-w commands below.
Info about customizing fringes [[https://emacsredux.com/blog/2015/01/18/customizing-the-fringes/][here]].
#+BEGIN_SRC emacs-lisp
  (visual-line-mode t)
  (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
  (fringe-mode '(6 . 10))
  (custom-set-variables  '(fringe ((t (:inherit default :foreground "white smoke")))))
#+END_SRC

** TODO Server Mode
*Tries to start new server when a new frame opens and complains that one is already running*
*Possibly switch to running a daemon and connecting with /emacsclient/.*
The issue above is because I was launching emacs from the Gnome application menu,
which does not run emacsclient.
To avoid the warning, I've run "systemctl --user enable emacs" in my terminal,
which should start an emacs daemon when I log in.
Then I should open emacs with Super+E, which I've bound to run emacsclient.
I've also set $EDITOR to emacsclient and removed emacs as a pinned program in the
dash to avoid starting a frame wiht emacs instead of emacsclient

Emacs has this really interesting feature called server-mode. Emacs is
notoriously slow to start (this happens if you have a giant emacs
config that does stupid things). To combat this, you can start a
single server process which will accept multiple clients. The server
maintains the state of everything (files open, variables defined,
processes running) and your client can attach / disconnect as
necessary. The connecting is super fast (vim speeds).
#+BEGIN_SRC emacs-lisp
  (if (not server-mode)
      (server-start nil t))
#+END_SRC

*** TODO server-shutdown
This is the converse function to the built-in server-start.
#+BEGIN_SRC emacs-lisp
(defun server-shutdown ()
  "Save buffers, Quit, and Shutdown (kill) server"
  (interactive)
  (save-some-buffers)
  (kill-emacs))
#+END_SRC

** dired-mode
Ability to use a to visit a new directory or file in dired instead of using RET.
RET works just fine, but it will create a new buffer for every interaction
whereas a reuses the current buffer.
#+BEGIN_SRC emacs-lisp
  (use-package dired
    :config
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'always)
    (setq delete-by-moving-to-trash t)
    (setq dired-listing-switches
          "-AGFhlv --group-directories-first --time-style=long-iso")
    (setq dired-dwim-target t)
    :hook
    ((dired-mode . dired-hide-details-mode)
     (dired-mode . hl-line-mode))
    )

  (use-package async
    :ensure t
    )

  (use-package dired-async
    :after (dired async)
    :hook (dired-mode . dired-async-mode)
    )

  (put 'dired-find-alternate-file 'disabled nil)
#+END_SRC
*** dired-subtree
Tree-style navigation means that the subdirectories of the current Dired buffer can be expanded and contracted in place.
 It then is possible to perform the same kind of folding on their subdirectories, and so on.

This is, in my opinion, a far more intuitive interaction than the default way of inserting subdirectories in the current buffer below their parent (type i over the target dir).
There still are uses for that technique, but tree-style navigation is easier for day-to-day tasks.

What I have here:
 - The tab key will expand or contract the subdirectory at point.
 - C-TAB will behave just like org-mode handles its headings: hit it once to expand a subdir at point, twice to do it recursively, thrice to contract the tree.
 - I also have Shift-TAB for contracting the subtree when the point is inside of it.

#+BEGIN_SRC emacs-lisp
  (use-package dired-subtree
    :ensure t
    :after dired
    :config
    (setq dired-subtree-use-backgrounds nil)
    :bind (:map dired-mode-map
                ("<tab>" . dired-subtree-toggle)
                ("<C-tab>" . dired-subtree-cycle)
                ("<S-iso-lefttab>" . dired-subtree-remove)))
#+END_SRC


*** Kill all dired buffers
dired will create buffers for every visited folder. This is a helper
to clear them out once you’re done working with those folders.
#+BEGIN_SRC emacs-lisp
(defun kill-dired-buffers ()
  "Kill all open dired buffers."
  (interactive)
  (mapc (lambda (buffer)
          (when (eq 'dired-mode (buffer-local-value 'major-mode buffer))
            (kill-buffer buffer)))
        (buffer-list)))
#+END_SRC

*** TODO Look up dired+

** Auto revert files on change
When something changes a file, automatically refresh the buffer containing that file so they can’t get out of sync.
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

** popup-kill-ring
Out of all the packages I tried out, this one, being the simplest,
appealed to me most. With a simple M-y you can now browse your
kill-ring like browsing autocompletion items. C-n and C-p totally work
for this.
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC

** Window Split Behavior
From StackOverflow on how to split windows vertically by default, at least when on a wide buffer.
#+begin_src emacs-lisp
  (setq split-height-threshold nil)
  (setq split-width-threshold 80)
#+end_src

** Windows
*** windmove
Windmove is built into Emacs. It lets you move point from window to
window using Shift and the arrow keys. This is easier to type than
‘C-x o’ when there are multiple windows open.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-M-<left>") 'windmove-left)
  (global-set-key (kbd "C-M-<right>") 'windmove-right)
  (global-set-key (kbd "C-M-<up>") 'windmove-up)
  (global-set-key (kbd "C-M-<down>") 'windmove-down)
  ;; (when (fboundp 'windmove-default-keybindings)
  ;;   (windmove-default-keybindings))
#+END_SRC

*** winner-mode
Allows to ‘undo’ (and ‘redo’) changes in the window configuration with
the key commands ‘C-c left’ and ‘C-c right’. Getting from many windows
to one window is easy: ‘C-x 1’ will do it. But getting back to a
delicate WindowConfiguration is difficult. This is where Winner Mode
comes in: With it, going back to a previous session is easy.
#+BEGIN_SRC emacs-lisp
(when (fboundp 'winner-mode)
  (winner-mode 1))
#+END_SRC

** Advice for C-w and M-w
With these in place you can kill or copy the line point is on with a single keystroke:
 - C-w kills the current line
 - M-w copies the current line
Note that if there is an active region, kill-region and kill-ring-save will continue to do what they normally do: Kill or copy it.
#+BEGIN_SRC emacs-lisp
  (defadvice kill-region (before slick-cut activate compile)
    "When called interactively with no active region, kill a single line instead."
    (interactive
     (if mark-active
         (list (region-beginning) (region-end))
       (list (line-beginning-position) (line-beginning-position 2)))))

  (defadvice kill-ring-save (before slick-copy activate compile)
    "When called interactively with no active region, copy a single line instead."
    (interactive
     (if mark-active
         (list (region-beginning) (region-end))
       (message "Copied line")
       (list (line-beginning-position) (line-beginning-position 2)))))
#+END_SRC

** Cursor follows split windows
When splitting windows, put the cursor in the "new" (ie. right/bottom) window.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x 2")
                  (lambda () (interactive)(split-window-vertically) (other-window 1)))
  (global-set-key (kbd "C-x 3")
                  (lambda () (interactive)(split-window-horizontally) (other-window 1)))
#+END_SRC

** buffer-move
Buffer-move makes it easy to swap windows.
#+BEGIN_SRC emacs-lisp
  (use-package buffer-move
    :ensure t
    :bind (("C-c C-<up>" . 'buf-move-up)
           ("C-c C-<down>" . 'buf-move-down)
           ("C-c C-<left>" . 'buf-move-left)
           ("C-c C-<right>" . 'buf-move-right)))
#+END_SRC

** TODO Narrowing
Check out: [[https://github.com/howardabrams/dot-files/blob/master/emacs.org#highlighting-and-narrowing][example]]

** TODO Spellcheck config
[[https://github.com/howardabrams/dot-files/blob/master/emacs.org#spell-checking%0A][example]]
** TODO Window Configuration
[[https://github.com/tlh/workgroups.el]]

** TODO pcre3el
package to use more standard regular expression syntax

** Keybindings
*** ibuffer
Prefer ibuffer to the default buffer list
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "\C-x\C-b") 'ibuffer)
#+END_SRC

*** Insert delimiter pairs
If you write any code, you may enjoy this. Typing the first character
in a set of 2, completes the second one after your cursor. Opening a
bracket? It’s closed for you already. Quoting something? It’s closed
for you already. You can easily add and remove pairs yourself, have a
look.
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                             (?\{ . ?\})
                             (?\( . ?\))
                             (?\[ . ?\])
                             (?\" . ?\")
                             ))

  (electric-pair-mode t)
#+END_SRC
*** Auto-indent with the Return key
#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "RET") 'newline-and-indent)
#+END_SRC


* Package Management
There a list of packages is stored under a variable and checked if
installed yet.
** General Package configurations
This section contains settings for non-built-in Emacs features that are generally applicable to different kinds of modes.
Other package configurations are below in the appropriate section.
*** Diminish and Delight
In Emacs speak, the name of a mode present at the modeline is called a "lighter". For example, Flyspell's lighter is "Fly".
With this package we can edit or rename lighters, or altogether hide them (the information is still available when running C-h m).
Furthermore, the functionality can be integrated in every package declaration of use-package: you will see a :delight tag.
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t)

  (use-package delight
    :ensure t)
#+END_SRC
*** Regular Expressions
#+BEGIN_SRC emacs-lisp
  (use-package visual-regexp
    :ensure t
    :config
    (setq vr/default-replace-preview nil)
    (setq vr/match-separator-use-custom-face t))
#+END_SRC

*** beacon-mode
Make sure this is installed somewhere first
Whenever the window scrolls a light will shine on top of your cursor so you know where it is. [[https://github.com/Malabarba/beacon]]
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :diminish beacon-mode
    :config
    (if window-system
        (beacon-mode 1)
      (beacon-mode nil)))
      ;; (setq beacon-color "#666600")
#+END_SRC
*** ibuffer
Put things into groups. Anything not grouped goes at the bottom of the ibuffer buffer.
Look into using [[https://github.com/purcell/ibuffer-vc][ibuffer-vc]] instead for grouping projects.
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("Org" (mode . org-mode))
                 ("Ibuffer" (or
                             (mode . ibuffer-mode)))
                 ("Dired" (or
                           (mode . dired-mode)
                           (mode . image-dired-display-image-mode)
                           (mode . image-dired-thumbnail-mode)))
                 ("Journal" (or
                             (name . "^\\*Calendar\\*$")
                             (name . "^Journal$")
                             (mode . org-journal-mode)))
                 ("info" (or
                          (mode . help-mode)
                          (mode . Info-mode)))
                 ("Logs/Messages" (or
                                   ;; (name . "^\\*scratch\\*$")
                                   (name . "^\\*Compile-Log\\*$")
                                   (name . "^\\*Warnings\\*$")
                                   (name . "^\\*Backtrace\\*$")
                                   (name . "^\\*Messages\\*$")))))))

  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-switch-to-saved-filter-groups "default")))
#+END_SRC

Turning off ibuffer-show-empty-filter-groups is particularly useful, because the empty filter groups can really clutter things up.
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-show-empty-filter-groups nil)
#+END_SRC

ibuffer-auto-mode is a minor mode that automatically keeps the buffer list up to date. I turn it on in my ibuffer-mode-hook:
#+BEGIN_SRC emacs-lisp
  (add-hook 'ibuffer-mode-hook
            '(lambda ()
               (ibuffer-auto-mode 1)
               (ibuffer-switch-to-saved-filter-groups "default")))
#+END_SRC

*** multiple-cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
   :ensure t
   :diminish multiple-cursors-mode
)
 (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
 (global-set-key (kbd "C->") 'mc/mark-next-like-this)
 (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
 (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC

*** which-key
Suggest next keys to me based on currently entered key combination.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :config
    (add-hook 'after-init-hook 'which-key-mode)

    (setq which-key-description-replacement-alist '(("Prefix Command" . "prefix")
                       ;; ("\\`calc-"       . "") ; Hide "calc-" prefixes when listing M-x calc keys
                       ("\\`projectile-" . "𝓟/")
                       ("\\`org-babel-"  . "ob/"))
                       )
)
#+END_SRC

*** expand-region
https://github.com/magnars/expand-region.el
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC

*** Aggressive Indent
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :ensure t)
#+END_SRC

*** Color hex names
Highlight strings which represent colours. I only want this in programming modes, and I don't want colour names to be highlighted.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
      :config
      (setq rainbow-x-colors nil)
      (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC

*** all-the-icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-dired
    :ensure t)
#+END_SRC

*** undo-tree
undo-tree visualises undo history as a tree for easy navigation.
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    ;; :chords (("uu" . undo-tree-visualize))
    :diminish undo-tree-mode
    :config
    (global-undo-tree-mode 1)
    (setq undo-tree-visualizer-timestamps t)
    :bind (("C-z" . undo)     ; C-z hides window by default -- annoying
           ("C-S-z" . redo)))
#+END_SRC

*** ido
ido means “Interactively Do Things”. ido has a completion engine that’s sensible to use everywhere.
It is built-in and nice and could change a lot of defaults like find-file and switching buffers.
It works well while not breaking Emacs defaults.
#+BEGIN_SRC emacs-lisp
  (ido-mode t)
  (ido-everywhere t)
  (setq ido-enable-flex-matching t)
#+END_SRC

**** ido-vertical-mode
ido-vertical-mode makes ido-mode display vertically.
https://github.com/creichert/ido-vertical-mode.el
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :diminish ido-mode
    :config
      (setq ido-vertical-define-keys 'C-n-and-C-p-only)
      (setq ido-vertical-show-count t)
    )

  (ido-vertical-mode 1)
#+END_SRC

*** smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t)
#+END_SRC

*** ivy, counsel, swiper
Manual: [[https://oremacs.com/swiper]]

I tried to get the behavior described [[https://github.com/munen/emacs.d/#ivycounselswiper][here]]: "Ivy is an interactive interface for completion in Emacs. Therefore it overlaps in functionality with ido. While Ivy is more powerful, it breaks certain standard functionality. So ido is enabled globally by default and for certain tasks, Ivy overrides ido."

Code block below copied from: https://github.com/zamansky/using-emacs/blob/master/myinit.org
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :config
    (setq counsel-yank-pop-separator "\n=================\n")
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))

  (use-package ivy
    :ensure t
    :diminish ivy-mode
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "%d/%d ")
    (setq ivy-display-style 'fancy))

  (use-package swiper
    :ensure t
    :bind (("C-s" . swiper-isearch)
           ("C-r" . swiper-isearch)
           ("C-c C-r" . ivy-resume)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))
#+END_SRC

**** ivy
#+BEGIN_SRC emacs-lisp
  ;; (use-package ivy
  ;;   :ensure t
  ;;   :config
  ;;   (ivy-mode 1)
  ;;   (setq ivy-use-virtual-buffers t)
  ;;   (setq enable-recursive-minibuffers t)
  ;;   (global-set-key (kbd "C-c C-r") 'ivy-resume))
#+END_SRC

**** swiper
#+BEGIN_SRC emacs-lisp
  ;; (use-package swiper
  ;;   :ensure t
  ;;   :config
  ;;   (global-set-key "\C-s" 'swiper))
#+END_SRC

**** counsel
#+BEGIN_SRC emacs-lisp
  ;; (use-package counsel
  ;;   :ensure t)
#+END_SRC

*** TODO treemacs
https://github.com/Alexander-Miller/treemacs

*** TODO browse-kill-ring
Broken: needs to be installed Ever wish you could just look through
everything you’ve killed recently to find out if you killed that piece
of text that you think you killed (or yanked), but you’re not quite
sure? If so, then browse-kill-ring is the Emacs extension for you.
#+BEGIN_SRC emacs-lisp
; (require 'browse-kill-ring)
;(setq browse-kill-ring-highlight-inserted-item t
;      browse-kill-ring-highlight-current-entry nil
;      browse-kill-ring-show-preview t)
;(define-key browse-kill-ring-mode-map (kbd "j") 'browse-kill-ring-forward)
;(define-key browse-kill-ring-mode-map (kbd "k") 'browse-kill-ring-previous)
#+END_SRC

*** TODO Visual Regular expressions
[[https://github.com/benma/visual-regexp.el]]

*** TODO hydras
https://github.com/abo-abo/hydra

** Package Sources
*Moved to [[file:init.el][init.el]]*
Add more package repositories
#+BEGIN_SRC emacs-lisp
  ;; (require 'package)
  ;; (setq package-archives '(("org"       . "https://orgmode.org/elpa/")
  ;;                          ("gnu"       . "https://elpa.gnu.org/packages/")
  ;;                          ("melpa"     . "https://melpa.org/packages/")
  ;;                          ;("melpa-stable" . "https://stable.melpa.org/packages/")
  ;;                          ))
  ;; (package-initialize)

  ;; ;; Initialize  the archive and refresh the contents in case there is no cached archive.
  ;; (unless (and (file-exists-p "~/.emacs.d/elpa/archives/org")
  ;;              (file-exists-p "~/.emacs.d/elpa/archives/gnu")
  ;;              (file-exists-p "~/.emacs.d/elpa/archives/melpa")
  ;;             ; (file-exists-p "~/.emacs.d/elpa/archives/melpa-stable") )
  ;;   (package-refresh-contents))
#+END_SRC

** use-package
*Moved to [[file:init.el][init.el]]*
If use-package is not installed, install it.
#+BEGIN_SRC emacs-lisp
  ;; (unless (package-installed-p 'use-package)
  ;;   (package-refresh-contents)
  ;;   (package-install 'use-package))

  ;; ;; Always install packages
  ;; (require 'use-package-ensure)
  ;; (setq use-package-always-ensure t)
#+END_SRC


* Coding
** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "/usr/local/bin/markdown"))
#+END_SRC

** TODO LSP - language server protocol
Github page: [[https://github.com/emacs-lsp/lsp-mode]]
Set up Language Server Protocol as in: https://github.com/rememberYou/.emacs.d/blob/master/config.org#lsp
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
:ensure t
:commands lsp
:disabled t
:custom
(lsp-auto-guess-root nil)
(lsp-prefer-flymake nil) ; Use flycheck instead of flymake
:bind (:map lsp-mode-map ("C-c C-f" . lsp-format-buffer))
:hook ((python-mode) . lsp))

(use-package lsp-ui
  :after lsp-mode
  :diminish
  :disabled t
  :commands lsp-ui-mode
  :custom-face
    (lsp-ui-doc-background ((t (:background nil))))
    (lsp-ui-doc-header ((t (:inherit (font-lock-string-face italic)))))
  :bind (:map lsp-ui-mode-map
                ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
                ([remap xref-find-references] . lsp-ui-peek-find-references)
                ("C-c u" . lsp-ui-imenu))
  :custom
    (lsp-ui-doc-enable t)
    (lsp-ui-doc-header t)
    (lsp-ui-doc-include-signature t)
    (lsp-ui-doc-position 'top)
    (lsp-ui-doc-border (face-foreground 'default))
    (lsp-ui-sideline-enable nil)
    (lsp-ui-sideline-ignore-duplicate t)
    (lsp-ui-sideline-show-code-actions nil)
    :config
    ;; Use lsp-ui-doc-webkit only in GUI
    (setq lsp-ui-doc-use-webkit t)
    ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer
    ;; https://github.com/emacs-lsp/lsp-ui/issues/243
    (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)
      (setq mode-line-format nil)))

    (use-package company-lsp
      :ensure t
      :commands company-lsp
      :disabled t
      :config
      (push 'company-lsp company-backends))

    (use-package lsp-treemacs
      :disabled t
      :commands lsp-treemacs-errors-list)

    ;; optionally if you want to use debugger

    (use-package dap-mode
      :after lsp-mode
      :disabled t
      :config
      (dap-mode t)
      (dap-ui-mode t))
    ;; (use-package dap-LANGUAGE) to load the dap adapter for your language
#+END_SRC

** Parentheses
More smartparens options shown here: [[https://github.com/mm--/dot-emacs/blob/master/jmm-emacs.org#smartparens]]
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
      :ensure t
      :diminish smartparens-mode
      :config
      (add-hook 'prog-mode-hook 'smartparens-mode))
#+END_SRC

Highlight parens etc. for improved readability.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
      :config
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

** Git
Magit is an awesome interface to git. Summon it with 'C-x g'.
Intro video: [[https://www.youtube.com/watch?v=vQO7F2Q9DwA]]
#+BEGIN_SRC emacs-lisp
  (use-package magit
      :ensure t
      :bind ("C-x g" . magit-status))
#+END_SRC

Display line changes in gutter based on git history. Enable it everywhere.
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :ensure t
    :config
      (global-git-gutter-mode 't)
    :diminish git-gutter-mode )
#+END_SRC

TimeMachine lets us step through the history of a file as recorded in git.
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :ensure t)
#+END_SRC

** TODO Projectile
Projectile is an awesome project manager, mostly because it recognizes
directories with a .git directory as projects and helps you manage
them accordingly. Enable projectile globally: this makes sure that
everything can be a project.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    ;; (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (setq projectile-completion-system 'ivy)
    (projectile-mode +1))

  (use-package counsel-projectile
    :ensure t
    )

  (use-package project-explorer
    :ensure t
    :bind ("C-c p n" . project-explorer-open))
#+END_SRC

Let projectile call make
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f5>") 'projectile-compile-project)
#+END_SRC

** dumb-jump
[[https://github.com/jacktasia/dumb-jump]]
#+BEGIN_SRC emacs-lisp
    (use-package dumb-jump
      :ensure
      :bind (("M-g o" . dumb-jump-go-other-window)
            ("M-g j" . dumb-jump-go)
            ("M-g b" . dumb-jump-back)
            ("M-g i" . dumb-jump-go-prompt)

            ("M-g x" . dumb-jump-go-prefer-external)
            ("M-g z" . dumb-jump-go-prefer-external-other-window))
     :config (setq dumb-jump-selector 'ivy) ;;
  )
#+END_SRC

** TODO Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+END_SRC

** TODO company mode
Like this idea of being able to easily insert math symbols based on
LaTeX keywords. Start typing a backslash.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (setq company-dabbrev-ignore-case t
          company-show-numbers t)
    (add-hook 'after-init-hook 'global-company-mode)
    :diminish company-mode
    :config
    ;; the math-suymbols symbol below is giving an error
    ;; (add-to-list 'company-backends 'company-math-symbols-unicode)
    :bind ("C-:" . company-complete)  ; In case I don't want to wait
    )
#+END_SRC

Take advantage of idle time by displaying some documentation using
company-quickhelp project.
#+BEGIN_SRC emacs-lisp
  (use-package company-quickhelp
    :ensure t
    :config
    (setq company-idle-delay 0)
    (company-quickhelp-mode 1)
    )
#+END_SRC


** TODO Python
*** Use python 3
#+BEGIN_SRC emacs-lisp
  (setq python-shell-interpreter "python3")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; (use-package virtualenvwrapper
  ;;   :ensure t
  ;;   :config
  ;;   (venv-initialize-interactive-shells)
  ;;   (venv-initialize-eshell))

  ;; (venv-workon "p3")
  ;; (setq lsp-python-executable-cmd "python3")
#+END_SRC

** TODO Anaconda mode for python

** Lisp
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :diminish eldoc-mode
    :config
    (add-hook 'emacs-lisp-mode-hook 'eldoc-mode))
#+END_SRC


* TODO Org Mode
 - Very detailed outline: [[http://doc.norang.ca/org-mode.html]]
 - Example config file: [[https://github.com/howardabrams/dot-files/blob/master/emacs-org.org#emacs-org-mode-settings][here]]
** General Config
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :init
    (add-hook 'org-mode-hook 'visual-line-mode)
    (add-hook 'org-mode-hook 'org-indent-mode)
    (add-hook 'org-mode-hook 'flyspell-mode)
    ;; (setq org-mobile-directory "~/Dropbox (Personal)/Apps/MobileOrg")
    :diminish visual-line-mode
    :diminish org-indent-mode
    :defer t
    :bind (("\C-c a" . org-agenda)
           ("\C-c c" . org-capture))
    :config
    (custom-set-variables
     '(org-directory "~/Dropbox/org"))

    (setq org-startup-folded nil)

    (with-eval-after-load 'org
      (org-babel-do-load-languages
       'org-babel-load-languages
       '(
         (shell . t)
         (python . t)
         (calc . t)
         ;; (dot . t)
         ;; (js . t)
         ;; (ruby . t)
         )))
    )

  ;; M-Ret will create a new list item without splitting the current line
  (setq  org-M-RET-may-split-line nil)

  ;; Override C-a in org mode
  (define-key org-mode-map (kbd "C-a") 'my/beginning-of-line)
#+END_SRC

*** Default Org Directory
#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/Dropbox/org/")
#+END_SRC

** Display Preferences
Use fancy bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
       :ensure t
       :diminish org-bullets-mode
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

** org-capture
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)

  (setq org-capture-templates
        '(("l" "Link" entry (file+headline "~/Dropbox/org/links.org" "Unsorted")
         "** %? %^L %^g \n%T" :prepend t))
        )
#+END_SRC

*** Set up org-capture for outside of emacs
Allows for starting a frame with org-capture even when no emacs frame are open.
Works by binding ==emacsclient -ne "(make-capture-frame)"== to a [[file:~/.dotfiles/window_keyboard_shortcuts][keyboard shortcut]] for my window manager
Reference: https://cestlaz.github.io/posts/using-emacs-24-capture-2/
#+BEGIN_SRC emacs-lisp
  (defadvice org-capture-finalize
      (after delete-capture-frame activate)
    "Advise capture-finalize to close the frame"
    (if (equal "capture" (frame-parameter nil 'name))
        (delete-frame)))

  (defadvice org-capture-destroy
      (after delete-capture-frame activate)
    "Advise capture-destroy to close the frame"
    (if (equal "capture" (frame-parameter nil 'name))
        (delete-frame)))

  ;; A comment in the above link claims to remove noflet dependency
  (use-package noflet
    :ensure t )

  (defun make-capture-frame ()
    "Create a new frame and run org-capture."
    (interactive)
    (make-frame '((name . "capture")))
    (select-frame-by-name "capture")
    (delete-other-windows)
    (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
      (org-capture)))
#+END_SRC

** org babel and code blocks
Stop asking to confirm evaluation of code blocks and add some languages
#+BEGIN_SRC emacs-lisp
  ;; Don’t ask every time when executing a code block.
  (setq org-confirm-babel-evaluate nil)

  ;; use python3 to run code blocks
  (setq org-babel-python-command "python3")

  ;; Keep typing while a code block runs!
  (use-package ob-async
    :ensure t)
#+END_SRC

Syntax highlight, tab behavior should match the language
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
#+END_SRC

*** TODO Easy-to-add emacs-lisp template
*Seems that an update changed how this works and broke the code below*
Hitting tab after an “<el” in an org-mode file will create a template
for elisp insertion.
#+BEGIN_SRC emacs-lisp
  (setq org-structure-template-alist '("s" . "src"))
#+END_SRC

** Org-journal
- Source: [[https://github.com/bastibe/org-journal]]
- Example:  [[https://github.com/howardabrams/dot-files/blob/master/emacs-org.org#journaling]]
- The github repo suggests the built-in plain-text serach is better
  than the org-agenda search (using tags etc, so I've just included a
  space to insert keywords in the org-journal-date-format variable,
  mainly to serach for people and places.)
Using the default 'daily option for org-journal-file-type.
org-journal-time-format is another customizable variable that
specifies the format for a timestamp on the heading of each new entry.
Since I intend the jounal as a record of the day's events, made most
likely at the end of the day or on a later date, I don't really care
about when I enter each individual event.
#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :ensure t
    ; :defer t
    :custom
      (org-journal-dir "~/Dropbox/org/journal/")
      (org-journal-file-format "%Y-%m-%d")
      (org-journal-date-format "%A, %d %B %Y\n People: \n Location: \n Keyword: "  )
      )
#+END_SRC

** TODO org-contacts
Getting a warning on startup
#+BEGIN_SRC emacs-lisp
;  (use-package org-contacts
;    :ensure nil
;    :after org
;    :custom (org-contacts-files '("~/Dropbox/org/contacts.org")))
#+END_SRC



* Experimental
** TODO Music?
Example:
 - [[https://www.gnu.org/software/emms/]]
 - [[https://github.com/daedreth/UncleDavesEmacs#emms-with-mpd]], found from YouTube: [[https://www.youtube.com/watch?v=xTVN8UDScqk]]
 - [[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org#music-through-mpd-via-emms]]

 #+BEGIN_SRC emacs-lisp
   (use-package emms
     :ensure t
     :config
       (require 'emms-setup)
       (require 'emms-player-mpd)
       (emms-all) ; don't change this to values you see on stackoverflow questions if you expect emms to work
       (setq emms-seek-seconds 5)
       (setq emms-player-list '(emms-player-mpd))
       (setq emms-info-functions '(emms-info-mpd))
       (setq emms-player-mpd-server-name "localhost")
       (setq emms-player-mpd-server-port "6602")
     :bind
       ;; ("s-m p" . emms)
       ;; ("s-m b" . emms-smart-browse)
       ;; ("s-m r" . emms-player-mpd-update-all-reset-cache)
       ("<XF86AudioPrev>" . emms-previous)
       ("<XF86AudioNext>" . emms-next)
       ("<XF86AudioPlay>" . emms-pause)
       ("<XF86AudioStop>" . emms-stop))
 #+END_SRC

*** MPC Setup
Setting the default port We use non-default settings for the socket,
to use the built in mpc functionality we need to set up a variable.
Adjust according to your setup.
#+BEGIN_SRC emacs-lisp
  (setq mpc-host "localhost:6602")
#+END_SRC

*** From UncleDaves github repo linked above
If you have an absolutely massive music library, it might be a good
idea to get rid of mpc-update and only invoke it manually when needed.
#+BEGIN_SRC emacs-lisp
    ;; (defun mpd/start-music-daemon ()
    ;;   "Start MPD, connects to it and syncs the metadata cache."
    ;;   (interactive)
    ;;   (shell-command "mpd")
    ;;   (mpd/update-database)
    ;;   (emms-player-mpd-connect)
    ;;   (emms-cache-set-from-mpd-all)
    ;;   (message "MPD Started!"))
  ;;  (global-set-key (kbd "s-m c") 'mpd/start-music-daemon)
#+END_SRC

Killing the daemon from within emacs
#+BEGIN_SRC emacs-lisp
  ;; (defun mpd/kill-music-daemon ()
  ;;   "Stops playback and kill the music daemon."
  ;;   (interactive)
  ;;   (emms-stop)
  ;;   (call-process "killall" nil nil nil "mpd")
  ;;   (message "MPD Killed!"))
  ;; (global-set-key (kbd "s-m k") 'mpd/kill-music-daemon)
#+END_SRC

Updating the database easily.
#+BEGIN_SRC emacs-lisp
  ;; (defun mpd/update-database ()
  ;;   "Updates the MPD database synchronously."
  ;;   (interactive)
  ;;   (call-process "mpc" nil nil nil "update")
  ;;   (message "MPD Database Updated!"))
  ;; (global-set-key (kbd "s-m u") 'mpd/update-database)
#+END_SRC

** TODO Email
*** TODO mu4e
Setup mu4e. Some instructions, among others:
  - [[http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/]]
  - [[https://github.com/munen/emacs.d/blob/master/configuration.org#mail]]
  - [[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org#email-with-mu4
