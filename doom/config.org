:DOC-CONFIG:
#+property: header-args:elisp :tangle (concat (file-name-sans-extension (buffer-file-name)) ".el")
#+property: header-args :mkdirp yes :comments yes
:END:

#+title: Doom Config
#+author: Brian Bonsignore
#+startup: fold

This is my literate configuration file for doom emacs.

* References
These are some of the best ones (several are also written in org mode). You will
find snippets from all of these (and possibly others) throughout my config.

- [[https://zzamboni.org/post/my-doom-emacs-configuration-with-commentary/][zzamboni's literare doom config]]
- [[https://github.com/jakebox/jake-emacs/blob/main/jake-emacs/init.org][jake b's literare config]]. Vanilla emacs, but inspired by other dsitros. Lookup thesaurus config.
- [[https://tecosaur.github.io/emacs-config/config.html][tecosaur's literate config w/ nice html export]]. Good calc mode customizations. Annotated with xkcd :smile:
- [[https://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's Emacs Configuration]]


* From the example doom config
#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Brian Bonsignore"
      user-mail-address "bonsignore.brian@gmail.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
(setq doom-font (font-spec :family "FiraCode Nerd Font" :size 14 :weight 'medium)
      doom-variable-pitch-font (font-spec :family "FiraCode Nerd Font" :size 14 :weight 'medium))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-vibrant)


;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
;; Line numbers are pretty slow all around. The performance boost of
;; disabling them outweighs the utility of always keeping them on.
(setq display-line-numbers-type nil)


;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src

#+RESULTS:


* My Customizations
#+begin_src elisp
(setq left-fringe-width 10
      right-fringe-width 10)

(setq which-key-idle-delay 0.25
      which-key-idle-secondary-delay 0.25)

;; Add an extra line to work around bug in which-key covering botton row
(defun add-which-key-line (f &rest r) (progn (apply f (list (cons (+ 1 (car (car r))) (cdr (car r)))))))
(advice-add 'which-key--show-popup :around #'add-which-key-line)

(after! evil-goggles
(setq evil-goggles-duration 0.5)
(setq evil-goggles-pulse t))

; (setq +lua-lsp-dir "~/.lua-language-server")

(dimmer-configure-which-key)
(dimmer-mode t)

;; Shows buffers when using Spc-, for example
;; (setq +ivy-buffer-preview t)

(setq company-idle-delay 0.2)

(after! magit
  (setq magit-diff-refine-hunk 'all))


;; Switch to the new window after splitting
(setq evil-split-window-below t
      evil-vsplit-window-right t)


;; Show how many lines are in a folded region
(setq vimish-fold-show-lines t)

;;(all-the-icons-ivy-rich-mode 1)
;;(ivy-rich-mode 1)
;; Fuzzier matching: https://oremacs.com/2016/01/06/ivy-flx/
;; (setq ivy-re-builders-alist
;;       '((t . ivy--regex-fuzzy)))

(use-package! writeroom-mode
  :config
  (setq +zen-text-scale 1.2
        writeroom--mode-line-showing t
        writeroom-mode-line-toggle-position 'mode-line-format)
  (map! :leader
        :desc "mode line" "tm" #'writeroom-toggle-mode-line))

(map! "C-y" #'evil-scroll-line-up
      :nvomeg "C-t" #'evil-scroll-line-down
      :nvomeg "C-e" #'evil-end-of-line)

(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
(map! :map evilem-map
      "b" #'evilem-motion-backward-WORD-begin
      "w" #'evilem-motion-forward-WORD-begin
      "j" #'evilem-motion-next-line-first-non-blank
      "k" #'evilem-motion-previous-line-first-non-blank)

(setq avy-style 'at-full)
(setq avy-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l ?: ?w ?e ?r ?t ?y ?u ?i ?o ?x ?c ?v ?b ?n ?m ?q ?p ?z ?m))

(map! :leader
      :desc "Eval form" :nv "x" #'eros-eval-last-sexp
      :desc "Dired" :nv "od" #'dired-jump
      :desc "Dired" :nv "oo" #'dired-jump
     ;; :desc "Resume last search" "hh" #'ivy-resume
      )

;; Increases left-fringe-width for magit overview. It wasn't shoing the collapse
;; markers very clearly by default
(defun my-magit-mode-hook ()
  "Custom `magit-mode' behaviours."
  (setq left-fringe-width 20
        right-fringe-width 0))

(add-hook 'magit-mode-hook 'my-magit-mode-hook)


(use-package! dired
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" #'dired-up-directory
    "l" #'dired-find-file))

(defun my-dired-mode-hook ()
  "My `dired' mode hook."
  ;; To hide dot-files by default
  (dired-hide-dotfiles-mode))

(add-hook 'dired-mode-hook #'my-dired-mode-hook)

(map! :map dired-mode-map
      :n "." #'dired-hide-dotfiles-mode)

(map! :map doom-leader-workspace-map "k" #'+workspace/delete)
(map! :map doom-leader-workspace-map "TAB" #'+workspace/switch-to :desc "Switch workspaces")
(map! :map doom-leader-workspace-map "." #'+workspace/display :desc "Show workspaces")

(map! :prefix "]" :n "TAB" #'+workspace/switch-right)
(map! :prefix "[" :n "TAB" #'+workspace/switch-left)
;; (map! :prefix "[ <tab>" #'+workspace/switch-right)


(global-prettify-symbols-mode -1)
(setq +pretty-code-enabled-modes nil)
(remove-hook 'after-change-major-mode-hook #'+pretty-code-init-pretty-symbols-h)

(defun my-web-mode-hook ()
  "Hooks for Web mode."
  (setq web-mode-markup-indent-offset 2))
(add-hook 'web-mode-hook  'my-web-mode-hook)



(use-package! tree-sitter
  :when (bound-and-true-p module-file-suffix)
  :hook (prog-mode . tree-sitter-mode)
  :hook (tree-sitter-after-on . tree-sitter-hl-mode)
  :config
  (require 'tree-sitter-langs)
  (defadvice! doom-tree-sitter-fail-gracefully-a (orig-fn &rest args)
    "Don't break with errors when current major mode lacks tree-sitter support."
    :around #'tree-sitter-mode
    (condition-case e
        (apply orig-fn args)
      (error
       (unless (string-match-p (concat "^Cannot find shared library\\|"
                                       "^No language registered\\|"
                                       "cannot open shared object file")
                            (error-message-string e))
            (signal (car e) (cadr e)))))))


;; (add-hook 'evil-jumps-post-jump-hook #'evil-scroll-line-to-center)
;; (add-hook 'better-jumper-mode-hook #'evil-scroll-line-to-center)
;; (add-hook 'magit-mode-hook (lambda () (magit-delta-mode +1)))


;; Don't keep a bunch of previously visited dired buffers around
(setq dired-kill-when-opening-new-dired-buffer t)

;; s/S don't need to be evil-snipe
(remove-hook 'doom-first-input-hook #'evil-snipe-mode)

;; Use s in normal and visual mode to add delimiters
;; (map! :nom "s" #'evil-embrace-evil-surround-region)

(setq consult-async-split-styles-alist '((nil :type nil) (comma :separator 44 :type separator) (semicolon :separator 59 :type separator) (perl :initial "/" :type perl)))
#+end_src


* org mode
#+begin_src elisp
;;; +org.el -*- lexical-binding: t; -*-

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/Dropbox/org/")


(after! org
  (setq org-agenda-start-with-log-mode t
        org-log-done 'time
        org-log-into-drawer t)

  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
          (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "MEETING")))

  (setq org-todo-keyword-faces
        '(("TODO" :foreground "forest green" :weight bold)
          ("NEXT" :foreground "blue" :weight bold)
          ("WAITING" :foreground "orange" :weight bold)
          ("HOLD" :foreground "purple" :weight bold)
          ("MEETING" :foreground "forest green" :weight bold)))

  ;; (setq org-todo-state-tags-triggers
  ;;       (quote (("CANCELLED" ("CANCELLED" . t))
  ;;               ("WAITING" ("WAITING" . t))
  ;;               ("HOLD" ("WAITING") ("HOLD" . t))
  ;;               (done ("WAITING") ("HOLD"))
  ;;               ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
  ;;               ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
  ;;               ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))

  (setq org-tag-alist
        '((:startgroup)
          ;; mutually exclusive tags here
          (:endgroup)
          ("@errand" . ?E)
          ("@home"   . ?H)
          ("@work"   . ?W)
          ("idea"    . ?i)))

  (setq org-agenda-files
        `(,(concat org-directory "tasks.org")
          ,(concat org-directory "archive.org")))

  (setq org-refile-targets
        '((nil :maxlevel . 1)
          (org-agenda-files :maxlevel . 1)))

  (setq org-ellipsis " ▼")

  (advice-add 'org-refile :after 'org-save-all-org-buffers))

#+end_src


* Hydras
** Buffer Menu
#+begin_src elisp
(defhydra hydra-buffer-menu (:color pink
                             :hint nil)
  "
^Mark^             ^Unmark^           ^Actions^          ^Search
^^^^^^^^-----------------------------------------------------------------
_m_: mark          _u_: unmark        _x_: execute       _R_: re-isearch
_s_: save          _U_: unmark up     _b_: bury          _I_: isearch
_d_: delete        ^ ^                _g_: refresh       _O_: multi-occur
_D_: delete up     ^ ^                _T_: files only: % -28`Buffer-menu-files-only
_~_: modified
"
  ("m" Buffer-menu-mark)
  ("u" Buffer-menu-unmark)
  ("U" Buffer-menu-backup-unmark)
  ("d" Buffer-menu-delete)
  ("D" Buffer-menu-delete-backwards)
  ("s" Buffer-menu-save)
  ("~" Buffer-menu-not-modified)
  ("x" Buffer-menu-execute)
  ("b" Buffer-menu-bury)
  ("g" revert-buffer)
  ("T" Buffer-menu-toggle-files-only)
  ("O" Buffer-menu-multi-occur :color blue)
  ("I" Buffer-menu-isearch-buffers :color blue)
  ("R" Buffer-menu-isearch-buffers-regexp :color blue)
  ("c" nil "cancel")
  ("v" Buffer-menu-select "select" :color blue)
  ("o" Buffer-menu-other-window "other-window" :color blue)
  ("q" quit-window "quit" :color blue))

;; (define-key ibuffer-mode-map "." 'hydra-buffer-menu/body)
#+end_src

** Multiple cursors
#+begin_src elisp
;; mc/num-cursors is not autoloaded
(require 'multiple-cursors)

(defhydra hydra-multiple-cursors (:hint nil)
  "
 Up^^             Down^^           Miscellaneous           % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")
------------------------------------------------------------------
 [_p_]   Next     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers
 [_P_]   Skip     [_N_]   Skip     [_a_] Mark all    [_A_] Insert letters
 [_M-p_] Unmark   [_M-n_] Unmark   [_s_] Search      [_q_] Quit
 [_|_] Align with input CHAR       [Click] Cursor at point"
  ("l" mc/edit-lines :exit t)
  ("a" mc/mark-all-like-this :exit t)
  ("n" mc/mark-next-like-this)
  ("N" mc/skip-to-next-like-this)
  ("M-n" mc/unmark-next-like-this)
  ("p" mc/mark-previous-like-this)
  ("P" mc/skip-to-previous-like-this)
  ("M-p" mc/unmark-previous-like-this)
  ("|" mc/vertical-align)
  ("s" mc/mark-all-in-region-regexp :exit t)
  ("0" mc/insert-numbers :exit t)
  ("A" mc/insert-letters :exit t)
  ("<mouse-1>" mc/add-cursor-on-click)
  ;; Help with click recognition in this hydra
  ("<down-mouse-1>" ignore)
  ("<drag-mouse-1>" ignore)
  ("q" nil))
#+end_src

** Theme Switcher
From [[https://github.com/jakebox/jake-emacs/blob/main/jake-emacs/init.org]]
#+BEGIN_SRC elisp
(defun jib/load-theme (theme)
  "Enhance `load-theme' by first disabling enabled themes."
  (mapc #'disable-theme custom-enabled-themes)
  (load-theme theme t))

(defhydra jib-hydra-theme-switcher (:hint nil)
  "
     Dark                ^Light^
----------------------------------------------
_1_ one              _z_ one-light
_2_ vivendi          _x_ operandi
_3_ molokai          _c_ jake-plain
_4_ snazzy           _v_ flatwhite
_5_ old-hope         _b_ opera-light
_6_ henna                ^
_7_ kaolin-galaxy        ^
_8_ peacock              ^
_9_ jake-plain-dark      ^
_q_ quit                 ^
^                        ^
"

  ;; Dark
  ("1" (jib/load-theme 'doom-one) "one")
  ("2" (jib/load-theme 'modus-vivendi) "modus-vivendi")
  ("3" (jib/load-theme 'doom-molokai) "molokai")
  ("4" (jib/load-theme 'doom-snazzy) "snazzy")
  ("5" (jib/load-theme 'doom-old-hope) "old-hope")
  ("6" (jib/load-theme 'doom-henna) "henna")
  ("7" (jib/load-theme 'kaolin-galaxy) "kaolin-galaxy")
  ("8" (jib/load-theme 'doom-peacock) "peacock")
  ("9" (jib/load-theme 'jake-doom-plain-dark) "jake-plain-dark")

  ;; Light
  ("z" (jib/load-theme 'doom-one-light) "one-light")
  ("x" (jib/load-theme 'modus-operandi) "modus-operandi")
  ("c" (jib/load-theme 'jake-doom-plain) "jake-plain")
  ("v" (jib/load-theme 'doom-flatwhite) "flatwhite")
  ("b" (jib/load-theme 'doom-opera-light) "opera-light")
  ("q" nil))
#+END_SRC


